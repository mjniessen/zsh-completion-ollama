#compdef ollama

#
# ZSH completion for ollama
#
# Written/tested with ollama version 0.3.13 and zsh 5.9
#
# Copyright   ▘ (c) 2024
#      ▛▛▌ ▌▛▌▌█▌▛▘▛▘█▌▛▌   ▛▘▛▌▛▛▌
# -=   ▌▌▌▙▌▌▌▌▙▖▄▌▄▌▙▖▌▌ ▗ ▙▖▙▌▌▌▌   =-
# Maurice J Niessen <info@mjniessen.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

_ollama() {
  local cmd cmds

  # NOTE: fixed cmds array for simplicity, may be change in the future
  cmds=(serve start create show run stop pull push list ls ps cp rm help)

  if (( CURRENT == 2 )); then
    # Usage:
    #   ollama _
    local -a flags
    flags=(
      '(-h --help)'{-h,--help}'[Help for ollama]'
      '(-V --version)'{-V,--version}'[Show version information]'
    )
    _arguments -S -s $flags
    _describe -t ollama-commands 'ollama commands' cmds
  else
    # Usage:
    #   ollama <cmd>_
    cmd="${words[2]}"
     # check if $cmd is in $cmds, the list of supported commands
    if [[ "${cmds[(r)$cmd]}" == "${cmd}" ]]; then
      shift words
      (( CURRENT-- ))
      _ollama_${cmd}
    fi
  fi
}

# ollama serve [flags]
#
# Aliases:
#   serve, start
#
# Flags:
#   -h, --help   help for serve
_ollama_serve() {
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for serve]'
  )
  _arguments -S -s $flags
}

_ollama_start() {
  _ollama_serve
}

# ollama create MODEL [flags]
#
# Flags:
#   -f, --file string       Name of the Modelfile (default "Modelfile")
#   -h, --help              help for create
#   -q, --quantize string   Quantize model to this level (e.g. q4_0)
#
# MODEL:
#   free selectable name (possible check for not name of an installed
#   or available model)
#
_ollama_create() {
  local -a flags
  # NOTE: no completion for the name of the MODEL yet
  if (( CURRENT > 2 )); then
    shift words
    (( CURRENT-- ))
    flags=(
      '-f[Name of the modelfile]:file:->modelfile'
      '--file[Name of the modelfile]:file:->modelfile'
      '-h[Help for run]:'
      '--help[Help for run]:'
      '-q[Quantize model to this level (e.g. q4_0)]:quantize:->quantize'
      '--quantize[Quantize model to this level (e.g. q4_0)]:quantize:->quantize'
    )
    _arguments -S -s $flags
    case "$state" in
      modelfile)
        _files
        ;;
      quantize)
        # TODO: figure out more values for <quantize string>
        _values -S, 'quantize' q4_0 
        ;;
    esac
  fi
}

# ollama show MODEL [flags]
#
# MODEL:
#   installed model
#
# [flags]:
#   -h, --help         help for show
#       --license      Show license of a model
#       --modelfile    Show Modelfile of a model
#       --parameters   Show parameters of a model
#       --system       Show system message of a model
#       --template     Show template of a model
_ollama_show() {
  local -a models
  models=(${(z)${${${(f)"$(timeout 1 ollama list 2>&1)"}%% *}//:/\\:}:#([A-Z])*})

  if (( ${#models[@]} == 0 )); then
    # TODO: check if word begins with '-', if not -> _message
    local -a flags
    flags=(
      '-h[Help for run]'
      '--help[Help for run]'
      '--license[Show license of a model]'
      '--modelfile[Show modelfile of a model]'
      '--parameters[Show parameters of a model]'
      '--system[Show system message of a model]'
      '--template[Show template of a model]'
    )
    _arguments -S -s $flags
    return
  elif (( CURRENT == 2 )); then
    _describe -t ollama-models 'installed models' models
  fi
}

# ollama run MODEL [PROMPT] [flags]
#
# Flags:
#       --format string      Response format (e.g. json)
#   -h, --help               help for run
#       --insecure           Use an insecure registry
#       --keepalive string   Duration to keep a model loaded (e.g. 5m)
#       --nowordwrap         Don't wrap words to the next line automatically
#       --verbose            Show timings for response
_ollama_run() {
  local -a models
  models=(${(z)${${${(f)"$(timeout 1 ollama list 2>&1)"}%% *}//:/\\:}:#([A-Z])*})

  if (( ${#models[@]} == 0 )); then
    # TODO: check if word begins with '-', if not -> _message
    local -a flags
    flags=(
      '-h[Help for run]'
      '--help[Help for run]'
    )
    _arguments -S -s $flags
    return
  elif (( CURRENT == 2 )); then
    _describe -t ollama-models 'installed models' models
  else
    # TODO: check for prompt string
    shift words
    (( CURRENT-- ))
    flags=(
      '--format[Respone format (e.g. json)]:format:->response'
      '-h[Help for run]:'
      '--help[Help for run]:'
      '--insecure[Use an insecure registry]:'
      '--keepalive[Duration to keep a model loaded (e.g. 5m)]:duration:->duration'
      "--nowordwrap[Don't wrap words to the next line automatically]:"
      '--verbose[Show timings for response]:'
    )
    _arguments -s $flags
    case "$state" in
      response)
        _values -S, 'format' json
        ;;
      duration)
        _values -S, 'duration' 15s 30s 1m 5m 10m 15m 30m 1h 2h 3h 6h
        ;;
    esac
  fi
}

#   ollama stop MODEL [flags]
#
# Flags:
#   -h, --help   help for stop
#
# MODEL:
#   running model
_ollama_stop() {
  local -a models
  models=(${(z)${${${(f)"$(timeout 1 ollama ps 2>&1)"}%% *}//:/\\:}:#([A-Z])*})

  if (( ${#models[@]} == 0 )); then
    local -a flags
    flags=(
      '-h[Help for run]'
      '--help[Help for run]'
    )
    _arguments -S -s $flags
    return
  elif (( CURRENT == 2 )); then
    _describe -t ollama-running-models 'running models' models
  else
    shift words
    (( CURRENT-- ))
    flags=(
      '-h[Help for run]:'
      '--help[Help for run]:'
    )
    _arguments -s $flags
  fi
}

# TODO:
#   ollama pull MODEL [flags]
#
# Flags:
#    -h, --help       help for pull
#        --insecure   Use an insecure registry
#
# MODEL: any string or list from internet source
_ollama_pull() {
  if (( CURRENT == 2 )); then
    local -a models
    if compset -P '*[.:]'; then
      models=($(_ollama_internet_model_versions "${words[2]}"))
      _describe -t ollama-models 'model versions' models
    else
      if compset -S '[.:]*'; then
        models=($(_ollama_cached_fetch))
      else
        models=($(_ollama_cached_fetch))
      fi
      _describe -t ollama-models 'available models' models
    fi
  else
    shift words
    (( CURRENT-- ))
    local -a flags
    flags=(
      '-h[Help for run]'
      '--help[Help for run]'
      '--insecure[Use an insecure registry]'
    )
    _arguments -S -s $flags
  fi
}
 
#   ollama push MODEL [flags]
#
# Flags:
#   -h, --help       help for push
#       --insecure   Use an insecure registry
#
# MODEL: installed model
_ollama_push() {
	local -a models
  models=(${(z)${${${(f)"$(timeout 1 ollama list 2>&1)"}%% *}//:/\\:}:#([A-Z])*})

  if (( ${#models[@]} == 0 )); then
    # TODO: check if word begins with '-', if not -> _message
    local -a flags
    flags=(
      '-h[Help for run]'
      '--help[Help for run]'
      '--insecure[Use an insecure registry]'
    )
    _arguments -S -s $flags
    return
  elif (( CURRENT == 2 )); then
    _describe -t ollama-models 'installed models' models
  fi
}

_ollama_list() {
  # Usage:
  #   ollama list [flags]
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for cp]'
  )
  _arguments -S -s $flags
}

_ollama_ls() {
  _ollama_list
}

_ollama_ps() {
  # Usage:
  #   ollama ps [flags]
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for cp]'
  )
  _arguments -S -s $flags
}

_ollama_cp() {
  # Usage:
  #   ollama cp SOURCE DESTINATION [flags]
  # SOURCE: installed model
  # DESTINATION: string
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for cp]'
  )
  _arguments -S -s $flags

  if [[ $CURRENT -eq 2 ]]; then
    local -a models
    models=(${(z)${${${(f)"$(timeout 1 ollama list 2>&1)"}%% *}//:/\\:}:#([A-Z])*})
    [[ ${#models[@]} ]] && _describe -t ollama-models 'installed ollama models' models
  fi
}

_ollama_rm() {
  # Usage:
  #   ollama rm MODEL [MODEL...] [flags]
  # MODEL(s): installed model(s)
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for rm]'
  )
  _arguments -S -s $flags

  if [[ $CURRENT -eq 2 ]]; then
    local -a models
    models=(${(z)${${${(f)"$(timeout 1 ollama list 2>&1)"}%% *}//:/\\:}:#([A-Z])*})
    [[ ${#models[@]} ]] && _describe -t ollama-models 'installed ollama models' models
  fi
}

# ollama help [command] [flags]
_ollama_help() {
  local -a flags
  flags=(
    '(-h --help)'{-h,--help}'[Help for help]'
  )
  if (( CURRENT == 2 )); then
    _describe -t ollama-commands 'ollama commands' cmds
  fi
  _arguments -S -s $flags
}

_ollama_internet_models() {
  local query="$1"
  curl --silent --connect-timeout 5 "https://ollama.com/library?q=${query}" \
    | grep '<a href="/library/' \
    | sed 's/.*library\///;s/\".*$//' \
    | sort
}

_ollama_internet_model_versions() {
  local model="${1%%:*}"
  curl --silent --connect-timeout 5 "https://ollama.com/library/${model}" \
    | grep 'href="/library/' \
    | sed 's/.*library\///;s/\".*$//' \
    | grep -E '(latest|[0-9]b)$' \
    | sed 's/.*://'
}

_ollama_cached_fetch() {
  local query cache age max_age
  query="$*"
  cache=${OLLAMA_CACHE_PATH:-$HOME/.ollama/cache}
  cache_folder=${cache%/*}
  max_age=${OLLAMA_CACHE_MAXAGE:-21600}

  # create configured folder for cache
  [[ -w "$(dirname "${cache_folder}")" && ! -e "$cache" ]] && mkdir -p "$cache_folder"

  # check age, if cache already exists
  [[ -e "$cache" ]] && age=$(($(date +%s) - $(stat -c %Y "$cache")))
  [[ -z "$age" ]] && ((age = max_age))
  if ((max_age > age)); then
    cat "$cache"
  else
    _ollama_internet_models "$query" | tee "$cache"
  fi
}

_ollama "$@"

# vim:ft=zsh ts=2 sw=2 sts=2 fdm=syntax
